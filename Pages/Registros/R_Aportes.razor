@page "/R_Aportes"
@page "/R_Aportes/{AporteID:int}"
@inject AportesBLL aportesbll
@inject NotificationService NotiService
@using Samir_AP1_P1.DAL;
@using Samir_AP1_P1.Models;
@using Samir_AP1_P1.BLL;


<div class="card-header">
	<h3>Registro de Reportes</h3>
</div>

<EditForm Model="Aportes" OnInvalidSubmit="Guardar">
	<DataAnnotationsValidator />

	<div class="row">
		<div class="col-md-6">
			<label for="AporteID">ID</label>
			<div >
				<InputNumber id="AporteID" min="0" @bind-Value="Aportes.AporteID" />
				<button class="btn btn-primary" @onclick="Buscar" type="button">
					<i class="oi oi-magnifying-glass" />
				</button>
			</div>
		</div>

		<div class="col-md-6">
			<div class="form-group">
				<label>Fecha:</label>
				<InputDate @bind-Value="Aportes.Fecha" class="form-control" required />
			</div>
		</div>
	</div>

	<div class="for-group">
		<label>Persona:</label>
		<InputText @bind-Value="Aportes.Persona" class="form-control" placeholder="Ingrese el nombre" required />
	</div>

	<div>
		<label>Descripcion:</label>
		<InputTextArea @bind-Value="Aportes.Descripcion" class="form-control" required />
	</div>

	<div>
		<label>Monto</label>
		<InputNumber min="1" max="10000000" @bind-Value="Aportes.Monto" class="form-control" required />
	</div>

	<button type="submit" class="btn btn-secundary" @onclick="Nuevo" >Nuevo</button>
	<button type="submit" class="btn btn-primary" @onclick="Guardar" ><i class="oi oi-check"/>Guardar</button>
	<button type="submit" class="btn btn-danger" @onclick="Eliminar"> <i class="oi oi-trash"/> Eliminar </button>
</EditForm>

@code {
	[Parameter]
	public int AporteID { get; set; }

	public Aportes Aportes { get; set; } = new Aportes();

	public void Buscar()
	{
		var AporteEncontrado = aportesbll.Buscar(Aportes.AporteID);
		if (AporteEncontrado != null)
		{
			this.Aportes = AporteEncontrado;
		}
		else
		{
			this.Aportes = new Aportes();
		}

	}

	protected override void OnInitialized()
	{
		if (AporteID > 0)
		{
			this.Aportes.AporteID = AporteID;
			this.Buscar();
		}

	}

	public void Nuevo()
	{
		var NotiNuevo = new NotificationMessage{
					Severity = NotificationSeverity.Info,
					Summary = "Nuevo",
					Detail = "Registro Nuevo",
					Duration = 4_000
			};
		NotiService.Notify(NotiNuevo);
		this.Aportes = new Aportes();
	}

	public bool Validar()
	{
		if(Aportes.AporteID < 0)
		{
			return false;
		}
		return true;
	}

	public void Guardar()
	{
		if (!Validar())
		{
			var NotiGuardar = new NotificationMessage{
					Severity = NotificationSeverity.Success,
					Summary = "Registrado",
					Detail = "Registro Guardado con Exito",
					Duration = 4_000
			};
			this.Aportes = new Aportes();
			NotiService.Notify(NotiGuardar);
		}
		else
		{
			var NotiGuardar = new NotificationMessage{
					Severity = NotificationSeverity.Error,
					Summary = "Error",
					Detail = "Registro No Guardado",
					Duration = 4_000
			};
			NotiService.Notify(NotiGuardar);
		}
	}

	public void Eliminar()
	{
		if (aportesbll.Eliminar(Aportes))
		{
			var NotiEliminar = new NotificationMessage{
					Severity = NotificationSeverity.Success,
					Summary = "Eliminado",
					Detail = "Registro Eliminado con Exito",
					Duration = 4_000
			};
			NotiService.Notify(NotiEliminar);
		}
		else
		{
			var NotiEliminar = new NotificationMessage{
					Severity = NotificationSeverity.Error,
					Summary = "Error",
					Detail = "Registro No Eliminado",
					Duration = 4_000
			};
			NotiService.Notify(NotiEliminar);
		}
	}
}
