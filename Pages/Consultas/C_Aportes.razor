@page "/C_Aportes"
@inject AportesBLL aportesbll
@using System.Linq.Expressions;
@using Samir_AP1_P1.Models;

<div class="card-header">
	<h3>Consultas de Aportes</h3>
</div>

<div class="row">
	<div class="col-md-3">
		<label>Desde:</label>
		<input class="form-control" type="date" @bind="Desde" />
	</div>

	<div class="col-md-3">
		<label>Hasta:</label>
		<input class="form-control" type="date" @bind="Hasta" />
	</div>
</div>

<label for="filtro">Seleccionar filtro:</label>
<div class="col-md-6 input-group filter-input">
	<InputSelect @bind-Value="Filtral" class="form-select">
		<option value="0">Fecha</option>
		<option value="1">Aporte Id</option>
		<option value="2">Persona</option>
	</InputSelect>
	<div class="input-group-append">
		<button type="button" class="btn btn-primary oi oi-magnifying-glass" @onclick="Buscar"></button>
	</div>
</div>

@if (Filtral == 1)
{
	<label for="aporteId">Aporte ID:</label>
	<input type="number" @bind="aportes.AporteID" class="form-control" id="aporteId" />
}
@if (Filtral == 2)
{
	<label for="persona">Persona:</label>
	<input type="text" @bind="aportes.Persona" class="form-control" id="persona" />
}


@if(Aportes != null)
{
	<div>
		<table class="table table-bordered table-striped">
			<thead>
				<tr>
					<th>ID</th>
					<th>Fecha</th>
					<th>Persona</th>
					<th>Descripcion</th>
					<th>Monto</th>

				</tr>
			</thead>
			<tbody>
				@foreach (var item in Aportes)
				{
					<tr>
						<td>@item.AporteID</td>
						<td>@item.Fecha</td>
						<td>@item.Persona</td>
						<td>@item.Descripcion</td>
						<td>@item.Monto</td>
						<td><a href="R_Aportes/@item.AporteID">Ver</a></td>
					</tr>
				}
				<tr>
					<td>Conteo = @Contal</td>
					<td></td>
					<td></td>
					<td class="text-end">Monto Total =</td>
					<td> @MontoTotal</td>
				</tr>
			</tbody>
		</table>
	</div>
}


@code {

	public List<Aportes> Aportes  = new List<Aportes>();
	public List<Aportes> ListaAportes = new List<Aportes>();
	public Aportes aportes { get; set; }  

	[Parameter]
	public int AporteID { get; set; }

	public int Contal { get; set; }
	public decimal MontoTotal { get; set; }
	public int Filtral { get; set; }

	public DateTime Hasta { get; set; }
	public DateTime Desde { get; set; }

	protected override void OnInitialized()
	{
		
		Hasta = DateTime.Now;
		Desde = DateTime.Now.AddMonths(-1); 

		Aportes = aportesbll.GetList(i => i.Fecha >= Desde.Date && i.Fecha <= Hasta);
		Contal = Aportes.Count();
		aportes = new Aportes();
		MontoTotal = Aportes.Sum(aporte => aporte.Monto);
	}

	public void Buscar()
	{
		Expression<Func<Aportes, bool>> filtro = l => l.Fecha >= Desde.Date && l.Fecha <= Hasta;

		switch (Filtral)
		{
			case 1: 
				filtro = l => l.AporteID == aportes.AporteID && l.Fecha >= Desde.Date && l.Fecha <= Hasta;
				break;

			case 2: 
				filtro = l => l.Persona == aportes.Persona && l.Fecha >= Desde.Date && l.Fecha <= Hasta;
				break;

			default: 
				break;
		}
		ListaAportes = aportesbll.GetList(filtro);

	}
}
